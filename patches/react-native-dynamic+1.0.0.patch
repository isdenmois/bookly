diff --git a/node_modules/react-native-dynamic/dist/dynamic-style-sheet.d.ts b/node_modules/react-native-dynamic/dist/dynamic-style-sheet.d.ts
index 5620341..c3f4aab 100644
--- a/node_modules/react-native-dynamic/dist/dynamic-style-sheet.d.ts
+++ b/node_modules/react-native-dynamic/dist/dynamic-style-sheet.d.ts
@@ -14,7 +14,7 @@ export declare type NormalizeStyles<T extends DynamicStyles<T>> = {
 export declare type DynamicViewStyle = DynamicStyle<ViewStyle>;
 export declare type DynamicTextStyle = DynamicStyle<TextStyle>;
 export declare type DynamicImageStyle = DynamicStyle<ImageStyle>;
-export declare class DynamicStyleSheet<T extends DynamicStyles<T>> {
+export declare class DynamicStyleSheet<T> {
     readonly dark: NormalizeStyles<T>;
     readonly light: NormalizeStyles<T>;
     constructor(styles: T);
diff --git a/node_modules/react-native-dynamic/dist/dynamic-style-sheet.js b/node_modules/react-native-dynamic/dist/dynamic-style-sheet.js
index a6210d8..42cbdf8 100644
--- a/node_modules/react-native-dynamic/dist/dynamic-style-sheet.js
+++ b/node_modules/react-native-dynamic/dist/dynamic-style-sheet.js
@@ -6,10 +6,12 @@ function parseStylesFor(styles, mode) {
     for (const i in styles) {
         const style = styles[i];
         const newStyle = {};
+        let subContainsDynamicValues;
         for (const i in style) {
             const value = style[i];
             if (value instanceof DynamicValue) {
                 containsDynamicValues = true;
+                subContainsDynamicValues = true;
                 newStyle[i] = value[mode];
             }
             else {
@@ -17,6 +19,7 @@ function parseStylesFor(styles, mode) {
             }
         }
         newStyles[i] = newStyle;
+        newStyles[i] = subContainsDynamicValues ? newStyle : style;
     }
     if (!containsDynamicValues && process.env.NODE_ENV !== 'production') {
         console.warn('A DynamicStyleSheet was used without any DynamicValues. Consider replacing with a regular StyleSheet.');
