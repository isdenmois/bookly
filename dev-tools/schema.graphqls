schema {
    query: Query
    mutation: Mutation
}

type UserChallenge {
    statusId: Int
    countBooksForecast: Int
    countBooksRead: Int
    countBooksTotal: Int
}

type UserBookPartial {
    bookRead: Int
    rating: Int
    dateDay: Int
    dateMonth: Int
    dateYear: Int
}

type LiveLibBook {
    id: ID!
    authorId: Int
    authorName: String
    name: String
    avgMark: Float
    pic70: String
    pic100: String
    pic140: String
    pic200: String
    userBookPartial: UserBookPartial
}

type Book {
    id: ID!
    title: String!
    author: String!
    status: BookStatus
}

enum BookStatus {
    WISH
    NOW
    READ
}

type ChangeStatusParams {
    id: ID!
}

type BookSearchResult {
    count: Int!
    books: [LiveLibBook]
}

type Query {
    userChallenge(user: ID!, year: Int!): UserChallenge
    userBooks(user: ID!, start: Int, count:  Int, type: String): [LiveLibBook]
    searchBooks(q: String!, start: Int!, count: Int!): BookSearchResult
    books: [Book]
}

type Mutation {
    changeStatus(bookId: ID!, bookRead: Int!, dateDay: Int, dateMonth: Int, dateYear: Int, rating: Int): LiveLibBook!
}
